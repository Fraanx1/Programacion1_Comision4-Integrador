# --- funciones.py ---
# Este archivo contiene la l√≥gica principal de la aplicaci√≥n (manipulaci√≥n de datos).

# Importamos las funciones necesarias del archivo de validaciones
from validaciones import validar_rango_numerico, validar_string, validar_texto

def cargar_datos(nombre_archivo_csv):

    """
    Lee y procesa el archivo CSV de pa√≠ses.
    Convierte cada l√≠nea en un diccionario y maneja errores.
    """
    paises = []
    
    try:
        # Abre el archivo en modo lectura ('r') con codificaci√≥n 'utf-8'
        with open(nombre_archivo_csv, 'r', encoding='utf-8') as archivo:
            # Saltea la primera l√≠nea (cabecera)
            next(archivo) 
            
            # Itera sobre cada l√≠nea restante del archivo
            for i, linea in enumerate(archivo):
                num_linea = i + 2 # (i arranca en 0, +1 por cabecera, +1 por ser √≠ndice)
                
                try:
                    # Limpia y separa la l√≠nea por comas
                    datos = [d.strip() for d in linea.split(',')]
                    
                    # 1. Valida que la l√≠nea tenga exactamente 4 campos
                    if len(datos) != 4:
                        print(f"""‚ö†Ô∏è L√≠nea {num_linea} ({linea.strip()}): Error de formato. Se omitir√°.""")
                        continue
                        
                    # 2. Crea el diccionario convirtiendo los tipos de datos
                    pais = {
                        'nombre': datos[0],
                        'poblacion': int(datos[1]), 
                        'superficie': float(datos[2]), 
                        'continente': datos[3]
                    }
                    # 3. Agrega el diccionario v√°lido a la lista
                    paises.append(pais)

                except ValueError:
                    # Captura error si int() o float() fallan
                    print(f"""‚ö†Ô∏è L√≠nea {num_linea}: Error de conversi√≥n (poblaci√≥n o superficie). Se omitir√°.""")
                except Exception:
                    # Captura cualquier otro error inesperado en la l√≠nea
                    print(f"""‚ö†Ô∏è L√≠nea {num_linea}: Error desconocido al procesar. Se omitir√°.""")
    
    except FileNotFoundError:
        # Captura error si el archivo 'paises.csv' no existe
        print(f"""‚ùå ERROR CR√çTICO: No se encontr√≥ el archivo '{nombre_archivo_csv}'.""")
    except Exception:
        # Captura cualquier otro error al intentar abrir el archivo (ej. permisos)
        print("‚ùå ERROR CR√çTICO: Fallo general al acceder al archivo CSV.")
        
    return paises


def buscar_por_nombre(paises):

    """Busca pa√≠ses por coincidencia parcial de nombre"""

    if not paises:
        print("‚ÑπÔ∏è No hay datos de pa√≠ses cargados.")
        return
        
    # Pide y valida un string de b√∫squeda (no vac√≠o, sin n√∫meros)
    busqueda_input = validar_string("Ingrese el nombre (o parte) del pa√≠s a buscar: ")

    # Normaliza la b√∫squeda
    busqueda_norm = validar_texto(busqueda_input)

    # Filtra la lista de pa√≠ses usando comprensi√≥n de listas
    resultados = [
        pais for pais in paises 
        if busqueda_norm in validar_texto(pais['nombre'])
    ]
            
    if resultados:
        print("\n‚úÖ Resultados de la b√∫squeda:")
        mostrar_paises(resultados)
    else:
        print(f"‚ÑπÔ∏è No se encontraron pa√≠ses que contengan '{busqueda_input}'.")


def filtrar_por_continente(paises):

    """Filtra pa√≠ses por nombre de continente, ignorando acentos."""

    # Pide y valida el nombre del continente
    continente_input = validar_string("Ingrese el continente a filtrar: ")
    
    # Normaliza la entrada del usuario
    continente_norm = validar_texto(continente_input)
    
    
    # Filtra la lista comparando datos normalizados
    resultados = [
        pais for pais in paises 
        if validar_texto(pais['continente']) == continente_norm
    ]
    return resultados


def filtrar_por_rango(paises, clave):

    """Filtra pa√≠ses por un rango num√©rico (poblaci√≥n o superficie)."""

    if not paises:
        print("‚ÑπÔ∏è No hay datos de pa√≠ses para filtrar.")
        return []
        
    # Pide y valida el rango (m√≠nimo y m√°ximo)
    min_val, max_val = validar_rango_numerico()
    
    # Filtra la lista seg√∫n la clave ('poblacion' o 'superficie')
    resultados = [
        pais for pais in paises
        if min_val <= pais[clave] <= max_val
    ]
    return resultados


def ordenar_paises(paises):

    """Ordena la lista de pa√≠ses por nombre, poblaci√≥n o superficie (asc o desc)."""

    if not paises:
        print("‚ÑπÔ∏è No hay datos para ordenar.")
        return
        
    # Valida la clave de ordenamiento
    while True:
        opcion = input("Ordenar por (N)ombre, (P)oblaci√≥n, (S)uperficie: ").strip().upper()
        if opcion in ('N', 'P', 'S'):
            break
        print("‚ùå Opci√≥n de ordenamiento inv√°lida. Use N, P o S.")
        
    # Asigna la clave de diccionario correcta
    clave_ordenamiento = {'N': 'nombre', 'P': 'poblacion', 'S': 'superficie'}.get(opcion)
    
    # Valida el orden (Ascendente/Descendente)
    while True:
        orden = input("Orden (A)scendente o (D)escendente: ").strip().upper()
        if orden in ('A', 'D'):
            break
        print("‚ùå Opci√≥n de orden inv√°lida. Use A o D.")

    # Determina el valor booleano para 'reverse'
    reverso = True if orden == 'D' else False
    
    # Ordena la lista usando la funci√≥n sorted() y una lambda
    paises_ordenados = sorted(paises, key=lambda pais: pais[clave_ordenamiento], reverse=reverso)
    
    print(f"\n‚úÖ Pa√≠ses ordenados por '{clave_ordenamiento}' ({'Descendente' if reverso else 'Ascendente'}):")
    # Muestra la lista ordenada
    mostrar_paises(paises_ordenados)


def mostrar_estadisticas(paises):

    """Calcula y muestra estad√≠sticas descriptivas sobre los datos."""

    if not paises:
        print("‚ÑπÔ∏è No hay datos de pa√≠ses cargados para calcular estad√≠sticas.")
        return
    
    cantidad_paises = len(paises)
    if cantidad_paises == 0:
        print("‚ÑπÔ∏è No hay pa√≠ses en la lista para calcular estad√≠sticas.")
        return

    # --- 1. C√°lculos de M√°ximos y M√≠nimos ---
    
    # Poblaci√≥n
    pais_mayor_pob = max(paises, key=lambda p: p['poblacion'])
    pais_menor_pob = min(paises, key=lambda p: p['poblacion'])
    
    
    # Superficie
    pais_mayor_sup = max(paises, key=lambda p: p['superficie'])
    pais_menor_sup = min(paises, key=lambda p: p['superficie'])

    
    # --- 2. Promedios ---
    total_poblacion = sum(pais['poblacion'] for pais in paises)
    total_superficie = sum(pais['superficie'] for pais in paises)
    
    promedio_poblacion = total_poblacion / cantidad_paises
    promedio_superficie = total_superficie / cantidad_paises

    # --- 3. Cantidad por Continente ---
    conteo_continentes = {}
    for pais in paises:
        continente = pais['continente']
        # .get(continente, 0) obtiene el valor actual o 0 si no existe
        conteo_continentes[continente] = conteo_continentes.get(continente, 0) + 1

    # --- Impresi√≥n de resultados ---
    print("\n--- ESTAD√çSTICAS GLOBALES ---")
    print(f"üåé Total de pa√≠ses cargados: {cantidad_paises}")
    print("-" * 30)
    
    # Poblaci√≥n
    print(f"ü•á Pa√≠s con MAYOR Poblaci√≥n: {pais_mayor_pob['nombre']} ({pais_mayor_pob['poblacion']:,} hab.)")
    print(f"ü•â Pa√≠s con MENOR Poblaci√≥n: {pais_menor_pob['nombre']} ({pais_menor_pob['poblacion']:,} hab.)")

    # Superficie
    print(f"üèûÔ∏è Pa√≠s con MAYOR Superficie: {pais_mayor_sup['nombre']} ({pais_mayor_sup['superficie']:,.2f} km¬≤)")
    print(f"üèúÔ∏è Pa√≠s con MENOR Superficie: {pais_menor_sup['nombre']} ({pais_menor_sup['superficie']:,.2f} km¬≤)")
    
    print("-" * 30)
    
    # Promedios
    print(f"üìä Promedio de Poblaci√≥n: {promedio_poblacion:,.0f} hab.") 
    print(f"üó∫Ô∏è Promedio de Superficie: {promedio_superficie:,.2f} km¬≤")
    print("-" * 30)
    
    # Conteo
    print("üåç Cantidad de Pa√≠ses por Continente:")
    # Usamos sorted() para mostrar los continentes alfab√©ticamente
    for continente, cantidad in sorted(conteo_continentes.items()):
        print(f" - {continente}: {cantidad} pa√≠ses")


def mostrar_paises(lista_paises):

    """Imprime una lista de pa√≠ses en formato de tabla con formato de miles."""

    if not lista_paises:
        # Si la lista est√° vac√≠a, no imprime nada.
        # El main() o la funci√≥n que llama se encargan de
        # imprimir "No se encontraron resultados".
        return
        
    # Imprime la cabecera de la tabla
    print("\n| Nombre                                   | Poblaci√≥n (hab) | Superficie (km¬≤) | Continente |")
    print("|------------------------------------------|-----------------|------------------|------------|")
    
    # Itera sobre cada pa√≠s en la lista
    for pais in lista_paises:
        # Formatea los n√∫meros para mejor legibilidad
        pob_fmt = f"{pais['poblacion']:,}" 
        sup_fmt = f"{pais['superficie']:,.2f}"
        
        # Imprime la fila con alineaci√≥n
        print(f"| {pais['nombre']:<40} | {pob_fmt:>15} | {sup_fmt:>16} | {pais['continente']:<10} |")
    
    # Imprime la l√≠nea final de la tabla
    print("-" * 94)

def mostrar_menu():

    """Muestra el men√∫ de opciones del sistema con un estilo est√©tico y √∫nico."""
    
    # --- Definici√≥n de Bordes (Ajustados a 53 de ancho) ---
    borde_sup = "‚ï≠" + "‚îÄ" * 53 + "‚ïÆ"  # <-- Cambiado de 52 a 53
    borde_inf = "‚ï∞" + "‚îÄ" * 53 + "‚ïØ"  # <-- Cambiado de 52 a 53
    borde_medio = "‚îú" + "‚îÄ" * 53 + "‚î§"  # <-- Cambiado de 52 a 53
    linea_vacia = "‚îÇ" + " " * 53 + "‚îÇ"  # <-- Cambiado de 52 a 53
    
    # --- T√≠tulo ---
    print("\n" + borde_sup)
    print(linea_vacia)
    print("‚îÇ" + "üåç GESTI√ìN MUNDIAL DE PA√çSES üåç".center(51) + "‚îÇ") #
    print("‚îÇ" + "UTN - Programaci√≥n 1".center(53) + "‚îÇ") 
    print(linea_vacia)
    print(borde_medio)

    # --- Opciones del Men√∫ ---
    print(f"‚îÇ {'[1] üì•  Cargar Datos (CSV)':<50} ‚îÇ")
    print(f"‚îÇ {'[2] üîé  Buscar por Nombre':<49}  ‚îÇ")
    print(f"‚îÇ {'[3] üåé  Filtrar por Continente':<49}  ‚îÇ")
    print(f"‚îÇ {'[4] üë•  Filtrar por Poblaci√≥n':<49}  ‚îÇ")
    print(f"‚îÇ {'[5] üó∫   Filtrar por Superficie':<50}  ‚îÇ")
    print(f"‚îÇ {'[6] üîÄ  Ordenar Pa√≠ses':<49}  ‚îÇ")
    print(f"‚îÇ {'[7] üìä  Ver Estad√≠sticas':<49}  ‚îÇ")
    print(f"‚îÇ {'[8] üìö  Mostrar Lista Completa':<49}  ‚îÇ")
    print(borde_medio)
    
    # --- Opci√≥n de Salir ---
    print(f"‚îÇ {'[0] ‚ùå  Salir del Programa':<50} ‚îÇ")
    print(borde_inf)